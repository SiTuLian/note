package edu.mowangxueyuan.ScientificComputer;

import java.util.Arrays;
import java.util.Scanner;

	/**
	 * 
	 * @author 妥瑞小胖墩
	 *
	 */

class Calculator{
	String strNumber = "0";//分割ch后存放数字的字符串
	String sign = "0";//分割ch后存放运算符号的字符串
	int blankCount = 0;//空格的数量
	String str;//输入的字符串
	char[] ch;//str转化后的字符数组
	char[] chNumber;//strNumber转化后的字符数组
	char[] chSign;//sign转化后的字符数组
	String[] array;//分割chNumber后存放的数值字符串
	double[] num;//array转化后的数组用于计算
	int j = 0;
	int len1 = 0;//
	int bracketCount = 0;//
	int startLen = 0;//
	int endLen = 0;//
	int[] start;//
	int[] end;//
	String[] bracketArray;//
	char[] chTemp;//
	int sNum = 0;
	int eNum = 0;
	double[] num1;
	int time = 0;
	boolean exist = false;
	int len2 = -1;
	String ab;
	String ax = "x";
	int time1;
	
	// 输入字符串并将其转化为字符数组
	public void inputString() {
		Scanner scanner = new Scanner(System.in);
		System.out.println("请输入式子");
		str = scanner.next();
		ch = str.toCharArray();
	}
	//判断括号的有无及其数量
	public void bracketJudge() {
		for (int i = 0; i<ch.length; ++i) {
			
			if (ch[i] == ')') {
				++bracketCount;
				exist = true;
				time1 = bracketCount;
			}
		}
	}
	public void bracketOperation() {
		bracketLocation();
		outBracketArray();
		copyCh();
	}
	public void bracket1(){
		bracketToCh();
		operation1();
		startAndEnd();
		times();
		empty();
	}
	
	public void run(){
		if (exist == true){
			
//			System.out.println(bracketCount);
			bracketOperation();
			for (int i = 0; i<time1; ++i) {
				bracket1();	
			}
			
			judge();
			segmentation1();
			mobile();
			shift();
			count();
			StringArray();
			storageStringArray();
			newMobile();
			transformArray();
			shiftDouble();
			core();
		}
		else{
			operation();
		}
	}
	public void operation1() {
		judge1();
		segmentation();
		mobile();
		shift();
		count();
		StringArray();
		storageStringArray();
		newMobile();
		shiftDouble();
		core();
	}
	

	
	//把每一对括号的起始和结束的位置分别保存在，start数组和end数组中
	public void bracketLocation() {
		if (bracketCount != 0) {
			
			start = new int[bracketCount];
			end = new int[bracketCount];
			num1 = new double[bracketCount];
			
			for (int i = 0; i<ch.length; ++i) {
				if (ch[i] == '(') {
					start[startLen] = i;
					++startLen;
				}
				else if (ch[i] == ')') {
					end[endLen] = i;
					++endLen;
				}
				else {
					continue;
				}
				
			}
		}
	}

	
	
	//把括号中的数取出来存放在字符串数组bracketArray中
	public void outBracketArray() {
		bracketArray = new String[bracketCount];
		
		for (int i = 0; i<bracketArray.length; ++i) {
			bracketArray[i] = "0";
		}
		for (int i = 0; i<ch.length; ++i) {
			if (ch[i] == '(') {
				++i;
				while (ch[i] != ')') {
					bracketArray[len1] += ch[i];
					++i;
				}
				len1++;
			}
			
			
		}
	}
	

	//将输入的字符数组复制到另一个字符数组chTemp
	public void copyCh() {
		chTemp = new char[ch.length];
		System.arraycopy(ch,0,chTemp,0,ch.length);
	}
	
	//字符串数组转化为字符数组
	public void bracketToCh() {
		bracketArray[time] = bracketArray[time].substring(1);
		ch = bracketArray[time].toCharArray();
		
	}

	
	public void operation() {
		judge();
		segmentation();
		mobile();
		shift();
		count();
		StringArray();
		storageStringArray();
		newMobile();
		shiftDouble();
		core();
	}
	
	//清空数组和变量
	public void empty() {
		strNumber = "0";
		sign = "0";
		blankCount = 0;
		j = 0;
//		len1 = 0;
//		bracketCount = 0;
//		startLen = 0;
//		endLen = 0;
		
	}
	
	//判断式子前有无负号
	public void judge1() {
		if (ch[0] == '-') {
			
			String zero = "0";
			bracketArray[time] = zero + bracketArray[time];
			ch = bracketArray[time].toCharArray();
		}
	}
	public void judge() {
		if (ch[0] == '-') {
			
			String zero = "0";
			str = zero + str;
			ch = str.toCharArray();
		}
	}
	//分割ch数组，将数字和负号存放到不同的数组
	public void segmentation() {
		for (int i = 0; i<ch.length; ++i) {
			if ( (ch[i]>= 48 && ch[i]<= 57 ) || ( ch[i] == '.' ) ) {
				
				strNumber += ch[i];
			}
			else {
				sign += ch[i];
				strNumber += " ";
			}
		}
	}
	//移动，将strNumber和sign向前移一位
	public void mobile() {
		strNumber = strNumber.substring(1);
		sign = sign.substring(1);
	}
	//字符串转化为字符数组
	public void shift() {
		chNumber = strNumber.toCharArray();
		chSign = sign.toCharArray();
	}
	//计算空格的数量
	public void count() {
		for (int i = 0; i<chNumber.length; ++i) {
			if (chNumber[i] == ' ') {
				++blankCount;
			}
		}
	}
	//根据空格数为array和num开辟相应的空间，并且为array初始化
	public void StringArray() {
		array = new String[blankCount + 1];
		num = new double[blankCount + 1];
		for (int i = 0; i<array.length; ++i) {
			array[i] = "0";
		}
	}
	//将chNumber数组每一个元素赋值给array数组
	public void storageStringArray() {
		for (int i = 0; i<chNumber.length; ++i) {
			if (chNumber[i] == ' ') {
				++j;
				++i;
			}
			array[j] += chNumber[i];
		}
	}
	//移动，舍去第一位字符
	public void newMobile() {
		for (int i = 0; i<array.length; ++i) {
			array[i] = array[i].substring(1);
		}
	}
	//将字符串数组转化为double数组
	public void shiftDouble() {
		for (int i = 0; i<array.length; ++i) {
			num[i] = Double.parseDouble(array[i]);
		}
	}
	//核心，先检索乘除运算再进行加减运算的检索
	public void core() {
		for (int k = 0; k<chSign.length; ++k) {
			
			if(chSign[k] == '*') {
				num[k] = num[k] * num[k+1];
				
				tell(num,k);
				num = Arrays.copyOf(num, num.length-1);
				say(chSign,k);
				chSign = Arrays.copyOf(chSign, chSign.length-1);
				--k;
				
			}
			else if(chSign[k] == '/') {
				num[k] = num[k] / num[k+1];
				
				tell(num,k);
				num = Arrays.copyOf(num, num.length-1);
				say(chSign,k);
				chSign = Arrays.copyOf(chSign, chSign.length-1);
				--k;
				
			}
			
			
		}
		
		for (int k = 0; k<chSign.length; ++k) {
			
			if(chSign[k] == '+') {
				num[k] = num[k] + num[k+1];
				
				tell(num,k);
				num = Arrays.copyOf(num, num.length-1);
				say(chSign,k);
				chSign = Arrays.copyOf(chSign, chSign.length-1);
				--k;
				
			}
			else if(chSign[k] == '-') {
				num[k] = num[k] - num[k+1];
				
				tell(num,k);
				num = Arrays.copyOf(num, num.length-1);
				say(chSign,k);
				chSign = Arrays.copyOf(chSign, chSign.length-1);
				--k;
				
			}	
		}
	}
	//数值数组缩容
	public void tell(double[] arr, int b) {
		
		for (int i = b+1; i<arr.length-1; ++i) {
			arr[i] = arr[i+1];
			
		}
		
	}
	//字符数组缩容
	public void say(char[] ch, int a) {
		
		for (int i = a; i<ch.length-1; ++i) {
			ch[i] = ch[i+1];
		}
		
	}
	
	public void startAndEnd() {
		
		int temp = start[sNum];
		chTemp[temp] = 'x';
		int temp1 = end[eNum];
		int gap = end[eNum] - start[sNum];
		
		if (start.length > 1) {
			for (int i = 1; i<start.length; ++i) {
				start[i] = start[i] - end[0] + start[0];
				end[i] = end[i] - end[0] + start[0];
			}
		}
		
		if ( temp1+1 == chTemp.length ) {
			chTemp = Arrays.copyOf(chTemp,chTemp.length-gap);
		}else {
			
			for (int i = temp+1; i<chTemp.length-gap; ++i) {
				chTemp[i] = chTemp[temp1+1];
				++temp1;
			}
			chTemp = Arrays.copyOf(chTemp,chTemp.length-gap);
			
			for (int i = 0; i<start.length-1; ++i) {
				start[i] = start[i+1];
			}
		
			for (int i = 0; i<end.length-1; ++i) {
				end[i] = end[i+1];
			}
			
			start = Arrays.copyOf(start,start.length-1);
			end = Arrays.copyOf(end,end.length-1);
		}
	}

	
	//count 存放  括号数
	public void times() {
		
		
		if (bracketCount != 0) {
			storageNum();
			bracketCount--;
			time++;
		}
		if (bracketCount == 0) {
			ch = new char[chTemp.length];
			System.arraycopy(chTemp,0,ch,0,chTemp.length);
		}
	}
	
	
	public void storageNum() {
		num1[time] = num[0];
	}
	

	public void transformArray() {
		for (int i = 0; i<array.length; ++i) {
			
			if (array[i].equals(ax)) {
				len2++;
				ab = Double.toString(num1[len2]);
				array[i] = ab;
			}
			
			
		}
	}
	public void segmentation1() {
		for (int i = 0; i<ch.length; ++i) {
			if ( (ch[i]>= 48 && ch[i]<= 57 ) || ( ch[i] == '.' ) || (ch[i] == 'x')) {
				
				strNumber += ch[i];
			}
			else {
				sign += ch[i];
				strNumber += " ";
			}
			
		}
	}

}

public class ScientificCalculator01 {

public static void main(String[] args) {
		
		Calculator cal = new Calculator();
		cal.inputString();
		cal.bracketJudge();
		
		cal.run();
		System.out.println(cal.num[0]);
		
		
	}
	
}