## svg的基本框架

<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">

<svg xmlns="http://www.w3.org/2000/svg" version="1.1">
  //在这里写svg元素
</svg>

## HTML引入SVG

通过标签<embed src="circle1.svg" type="image/svg+xml" />
	<object data="circle1.svg" type="image/svg+xml"></object>
	<iframe src="circle1.svg"></iframe>

直接在HTML嵌入SVG代码
<svg xmlns="http://www.w3.org/2000/svg" version="1.1">
   <circle cx="100" cy="50" r="40" stroke="black" stroke-width="2" fill="red" />
</svg>

链接到SVG文件
<a href="circle1.svg">View SVG file</a>

## SVG的基本图形
	公共属性
		stroke-width：定义边框的宽度
		stroke:边框的颜色
		fill-opacity:定义填充颜色透明度
		stroke-opacity:定义轮廓颜色的透明度
		opacity:定义元素的透明值

### 矩形

	绘制矩形 <rect></rect>
	
	属性：
		width:宽度
		height：高度
		fill：填充颜色
		x:定义矩形的左侧位置
		y:定义矩形的顶端位置	 
		rx 和 ry：可使矩形产生圆角

### 圆形
	<circle></circle>
	属性
		cx,cy:圆心的坐标
		r:圆的半径
	
### 椭圆

	 <ellipse></ellipse>
	属性

		cx属性定义的椭圆中心的x坐标
		cy属性定义的椭圆中心的y坐标
		rx属性定义的水平半径
		ry属性定义的垂直半径

### 直线
	<line></line>
	属性
		x1 属性在 x 轴定义线条的开始
		y1 属性在 y 轴定义线条的开始
		x2 属性在 x 轴定义线条的结束
		y2 属性在 y 轴定义线条的结束

### 多边形
	<polygon></polygon>

	<polygon points="200,20 250,190 160,210,50,50"
  		style="fill:lime;stroke:purple;stroke-width:1"/>
	属性
		points：定义多边形每个角的 x 和 y 坐标

	SVG的图形填充规则通过fill-rule属性来指定。
	fill-rule 属性用于指定使用哪一种算法去判断画布上的某区域是否属于该图形“内部” （内部区域将被填充
	nonzero：按该规则，要判断一个点是否在图形内，从该点作任意方向的一条射线，然后检测射线与图形路径的交点情况。从0开始计数，路径从左向右穿过射线则计数加1，从右向左穿过射线则计数减1。得出计数结果后，如果结果是0，则认为点在图形外部，否则认为在内部。

	evenodd：按该规则，要判断一个点是否在图形内，从该点作任意方向的一条射线，然后检测射线与图形路径的交点的数量。如果结果是奇数则认为点在内部，是偶数则认为点在外部。

### 曲线

	<polyline></polyline>
	points：定义曲线每个点的 x 和 y 坐标

### 路径
	<path></path>

	<path d="M150 0 L75 200 L225 200 Z" />

	下面的命令可用于路径数据：

		M = moveto
		L = lineto
		H = horizontal lineto
		V = vertical lineto
		C = curveto
		S = smooth curveto
		Q = quadratic Bézier curve
		T = smooth quadratic Bézier curveto
		A = elliptical Arc
		Z = closepath
	以上所有命令均允许小写字母。大写表示绝对定位，小写表示相对定位。

	命令详解
M = moveto

M x y 移动到指定坐标，xy分别为x轴和y轴的坐标点，类似画笔的起点。

path中的起点，必须存在（文档中虽然没有提到过，但是path的其他命令都需要依赖一个初始位置，而实际操作过程中也没有需要到可以不使用M的情况，后面发现有例外我再过来补充。

L = lineto

L x y 在初始位置（M 画的起点）和xy确定的坐标画一条线。
两点一线，直线，绘图中很常见的方式。

H = horizontal lineto

H x 沿着x轴移动一段位置

V = vertical lineto

V y 沿着y轴移动一段位置

C = curveto

C x1 y1 x2 y2 x y
三次贝塞尔曲线
当前点为起点，xy为终点，起点和x1y1控制曲线起始的斜率，终点和x2y2控制结束的斜率。

S = smooth curveto

S x2 y2 x y
简化的贝塞尔曲线
1.如果S命令跟在一个C命令或者另一个S命令的后面，它的第一个控制点，就会被假设成前一个控制点的对称点。

2.如果S命令单独使用，前面没有C命令或者另一个S命令，那么它的两个控制点就会被假设为同一个点。

Q = quadratic Bézier curve

Q x1 y1 x y
二次贝塞尔曲线Q
只需要一个控制点，用来确定起点和终点的曲线斜率。因此它需要两组参数，控制点和终点坐标。

T = smooth quadratic Bézier curveto

Q命令的简写命令。</br>
与S命令相似，T也会通过前一个控制点，推断出一个新的控制点。
1.T命令前面必须是一个Q命令，或者是另一个T命令

2.如果T单独使用，那么控制点就会被认为和终点是同一个点，所以画出来的将是一条直线

A = elliptical Arc

A rx,ry x-axis-rotation large-arc-flag sweep-flag x,y
rx 弧的半长轴长度
ry 弧的半短轴长度
x-axis-rotation 是此段弧所在的x轴与水平方向的夹角，即x轴的逆时针旋转角度，负数代表顺时针旋转角度。
large-arc-flag 为1表示大角度弧线，0表示小角度弧线
sweep-flag 为1表示从起点到终点弧线绕中心顺时针方向，0表示逆时针方向。
xy 是终点坐标。

Z = closepath

 从当前位置到起点画一条直线闭合。

### 文本

	<text></text>
 <text x="0" y="15" fill="red">I love SVG</text>

	旋转文本
	<text x="0" y="15" fill="red" transform="rotate(30 20,40)">I love SVG</text>

	路径上的文本
	<defs>
    		<path id="path1" d="M75,20 a1,1 0 0,0 100,0" />
 	</defs>
  	<text x="10" y="100" style="fill:red;">
  	 	<textPath xlink:href="#path1">I love SVG I love SVG</textPath>
 	</text>

	属性：x,y
	      text-size:文字大小
	      text-anthor="start|middle|end" 文字对齐

### Stroke 属性

stroke：定义一条线，文本或元素轮廓颜色
stroke-width：定义了一条线，文本或元素轮廓厚度
stroke-linecap：属性定义不同类型的开放路径的终结 butt|round|square
stroke-dasharray:创建虚线

--------------------------------------------------------------

<g></g> 分组标签

<image></image> 引入图片

	属性
		x,y,width,height
		xlink:href="图片地址"